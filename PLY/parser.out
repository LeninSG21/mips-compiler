Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    I
    J
    LABEL
    MNEMONIC
    NUMBER
    O
    OFFSET

Grammar

Rule 0     S' -> exp
Rule 1     exp -> exp exp
Rule 2     exp -> inst
Rule 3     exp -> LABELDEF inst
Rule 4     inst -> R REG COMA REG COMA REG
Rule 5     inst -> R REG COMA REG
Rule 6     inst -> R REG
Rule 7     inst -> R REG COMA REG COMA IMM

Terminals, with rules where they appear

COMA                 : 4 4 5 7 7
I                    : 
IMM                  : 7
J                    : 
LABEL                : 
LABELDEF             : 3
MNEMONIC             : 
NUMBER               : 
O                    : 
OFFSET               : 
R                    : 4 5 6 7
REG                  : 4 4 4 5 5 6 7 7
error                : 

Nonterminals, with rules where they appear

exp                  : 1 1 0
inst                 : 2 3

Parsing method: LALR

state 0

    (0) S' -> . exp
    (1) exp -> . exp exp
    (2) exp -> . inst
    (3) exp -> . LABELDEF inst
    (4) inst -> . R REG COMA REG COMA REG
    (5) inst -> . R REG COMA REG
    (6) inst -> . R REG
    (7) inst -> . R REG COMA REG COMA IMM

    LABELDEF        shift and go to state 3
    R               shift and go to state 4

    exp                            shift and go to state 1
    inst                           shift and go to state 2

state 1

    (0) S' -> exp .
    (1) exp -> exp . exp
    (1) exp -> . exp exp
    (2) exp -> . inst
    (3) exp -> . LABELDEF inst
    (4) inst -> . R REG COMA REG COMA REG
    (5) inst -> . R REG COMA REG
    (6) inst -> . R REG
    (7) inst -> . R REG COMA REG COMA IMM

    LABELDEF        shift and go to state 3
    R               shift and go to state 4

    exp                            shift and go to state 5
    inst                           shift and go to state 2

state 2

    (2) exp -> inst .

    LABELDEF        reduce using rule 2 (exp -> inst .)
    R               reduce using rule 2 (exp -> inst .)
    $end            reduce using rule 2 (exp -> inst .)


state 3

    (3) exp -> LABELDEF . inst
    (4) inst -> . R REG COMA REG COMA REG
    (5) inst -> . R REG COMA REG
    (6) inst -> . R REG
    (7) inst -> . R REG COMA REG COMA IMM

    R               shift and go to state 4

    inst                           shift and go to state 6

state 4

    (4) inst -> R . REG COMA REG COMA REG
    (5) inst -> R . REG COMA REG
    (6) inst -> R . REG
    (7) inst -> R . REG COMA REG COMA IMM

    REG             shift and go to state 7


state 5

    (1) exp -> exp exp .
    (1) exp -> exp . exp
    (1) exp -> . exp exp
    (2) exp -> . inst
    (3) exp -> . LABELDEF inst
    (4) inst -> . R REG COMA REG COMA REG
    (5) inst -> . R REG COMA REG
    (6) inst -> . R REG
    (7) inst -> . R REG COMA REG COMA IMM

  ! shift/reduce conflict for LABELDEF resolved as shift
  ! shift/reduce conflict for R resolved as shift
    $end            reduce using rule 1 (exp -> exp exp .)
    LABELDEF        shift and go to state 3
    R               shift and go to state 4

  ! LABELDEF        [ reduce using rule 1 (exp -> exp exp .) ]
  ! R               [ reduce using rule 1 (exp -> exp exp .) ]

    exp                            shift and go to state 5
    inst                           shift and go to state 2

state 6

    (3) exp -> LABELDEF inst .

    LABELDEF        reduce using rule 3 (exp -> LABELDEF inst .)
    R               reduce using rule 3 (exp -> LABELDEF inst .)
    $end            reduce using rule 3 (exp -> LABELDEF inst .)


state 7

    (4) inst -> R REG . COMA REG COMA REG
    (5) inst -> R REG . COMA REG
    (6) inst -> R REG .
    (7) inst -> R REG . COMA REG COMA IMM

    COMA            shift and go to state 8
    LABELDEF        reduce using rule 6 (inst -> R REG .)
    R               reduce using rule 6 (inst -> R REG .)
    $end            reduce using rule 6 (inst -> R REG .)


state 8

    (4) inst -> R REG COMA . REG COMA REG
    (5) inst -> R REG COMA . REG
    (7) inst -> R REG COMA . REG COMA IMM

    REG             shift and go to state 9


state 9

    (4) inst -> R REG COMA REG . COMA REG
    (5) inst -> R REG COMA REG .
    (7) inst -> R REG COMA REG . COMA IMM

    COMA            shift and go to state 10
    LABELDEF        reduce using rule 5 (inst -> R REG COMA REG .)
    R               reduce using rule 5 (inst -> R REG COMA REG .)
    $end            reduce using rule 5 (inst -> R REG COMA REG .)


state 10

    (4) inst -> R REG COMA REG COMA . REG
    (7) inst -> R REG COMA REG COMA . IMM

    REG             shift and go to state 11
    IMM             shift and go to state 12


state 11

    (4) inst -> R REG COMA REG COMA REG .

    LABELDEF        reduce using rule 4 (inst -> R REG COMA REG COMA REG .)
    R               reduce using rule 4 (inst -> R REG COMA REG COMA REG .)
    $end            reduce using rule 4 (inst -> R REG COMA REG COMA REG .)


state 12

    (7) inst -> R REG COMA REG COMA IMM .

    LABELDEF        reduce using rule 7 (inst -> R REG COMA REG COMA IMM .)
    R               reduce using rule 7 (inst -> R REG COMA REG COMA IMM .)
    $end            reduce using rule 7 (inst -> R REG COMA REG COMA IMM .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LABELDEF in state 5 resolved as shift
WARNING: shift/reduce conflict for R in state 5 resolved as shift
