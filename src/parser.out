Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> exp
Rule 1     exp -> exp exp
Rule 2     exp -> inst
Rule 3     exp -> LABELDEF inst
Rule 4     inst -> R REG COMA REG COMA REG
Rule 5     inst -> R REG COMA REG
Rule 6     inst -> R REG
Rule 7     inst -> R REG COMA REG COMA IMM
Rule 8     inst -> I REG COMA REG COMA IMM
Rule 9     inst -> I REG COMA IMM
Rule 10    inst -> I REG COMA IMM REG
Rule 11    inst -> I REG COMA REG COMA LABEL
Rule 12    inst -> I REG COMA LABEL
Rule 13    inst -> J IMM
Rule 14    inst -> O

Terminals, with rules where they appear

COMA                 : 4 4 5 7 7 8 8 9 10 11 11 12
I                    : 8 9 10 11 12
IMM                  : 7 8 9 10 13
J                    : 13
LABEL                : 11 12
LABELDEF             : 3
O                    : 14
R                    : 4 5 6 7
REG                  : 4 4 4 5 5 6 7 7 8 8 9 10 10 11 11 12
error                : 

Nonterminals, with rules where they appear

exp                  : 1 1 0
inst                 : 2 3

Parsing method: LALR

state 0

    (0) S' -> . exp
    (1) exp -> . exp exp
    (2) exp -> . inst
    (3) exp -> . LABELDEF inst
    (4) inst -> . R REG COMA REG COMA REG
    (5) inst -> . R REG COMA REG
    (6) inst -> . R REG
    (7) inst -> . R REG COMA REG COMA IMM
    (8) inst -> . I REG COMA REG COMA IMM
    (9) inst -> . I REG COMA IMM
    (10) inst -> . I REG COMA IMM REG
    (11) inst -> . I REG COMA REG COMA LABEL
    (12) inst -> . I REG COMA LABEL
    (13) inst -> . J IMM
    (14) inst -> . O

    LABELDEF        shift and go to state 3
    R               shift and go to state 4
    I               shift and go to state 5
    J               shift and go to state 6
    O               shift and go to state 7

    exp                            shift and go to state 1
    inst                           shift and go to state 2

state 1

    (0) S' -> exp .
    (1) exp -> exp . exp
    (1) exp -> . exp exp
    (2) exp -> . inst
    (3) exp -> . LABELDEF inst
    (4) inst -> . R REG COMA REG COMA REG
    (5) inst -> . R REG COMA REG
    (6) inst -> . R REG
    (7) inst -> . R REG COMA REG COMA IMM
    (8) inst -> . I REG COMA REG COMA IMM
    (9) inst -> . I REG COMA IMM
    (10) inst -> . I REG COMA IMM REG
    (11) inst -> . I REG COMA REG COMA LABEL
    (12) inst -> . I REG COMA LABEL
    (13) inst -> . J IMM
    (14) inst -> . O

    LABELDEF        shift and go to state 3
    R               shift and go to state 4
    I               shift and go to state 5
    J               shift and go to state 6
    O               shift and go to state 7

    exp                            shift and go to state 8
    inst                           shift and go to state 2

state 2

    (2) exp -> inst .

    LABELDEF        reduce using rule 2 (exp -> inst .)
    R               reduce using rule 2 (exp -> inst .)
    I               reduce using rule 2 (exp -> inst .)
    J               reduce using rule 2 (exp -> inst .)
    O               reduce using rule 2 (exp -> inst .)
    $end            reduce using rule 2 (exp -> inst .)


state 3

    (3) exp -> LABELDEF . inst
    (4) inst -> . R REG COMA REG COMA REG
    (5) inst -> . R REG COMA REG
    (6) inst -> . R REG
    (7) inst -> . R REG COMA REG COMA IMM
    (8) inst -> . I REG COMA REG COMA IMM
    (9) inst -> . I REG COMA IMM
    (10) inst -> . I REG COMA IMM REG
    (11) inst -> . I REG COMA REG COMA LABEL
    (12) inst -> . I REG COMA LABEL
    (13) inst -> . J IMM
    (14) inst -> . O

    R               shift and go to state 4
    I               shift and go to state 5
    J               shift and go to state 6
    O               shift and go to state 7

    inst                           shift and go to state 9

state 4

    (4) inst -> R . REG COMA REG COMA REG
    (5) inst -> R . REG COMA REG
    (6) inst -> R . REG
    (7) inst -> R . REG COMA REG COMA IMM

    REG             shift and go to state 10


state 5

    (8) inst -> I . REG COMA REG COMA IMM
    (9) inst -> I . REG COMA IMM
    (10) inst -> I . REG COMA IMM REG
    (11) inst -> I . REG COMA REG COMA LABEL
    (12) inst -> I . REG COMA LABEL

    REG             shift and go to state 11


state 6

    (13) inst -> J . IMM

    IMM             shift and go to state 12


state 7

    (14) inst -> O .

    LABELDEF        reduce using rule 14 (inst -> O .)
    R               reduce using rule 14 (inst -> O .)
    I               reduce using rule 14 (inst -> O .)
    J               reduce using rule 14 (inst -> O .)
    O               reduce using rule 14 (inst -> O .)
    $end            reduce using rule 14 (inst -> O .)


state 8

    (1) exp -> exp exp .
    (1) exp -> exp . exp
    (1) exp -> . exp exp
    (2) exp -> . inst
    (3) exp -> . LABELDEF inst
    (4) inst -> . R REG COMA REG COMA REG
    (5) inst -> . R REG COMA REG
    (6) inst -> . R REG
    (7) inst -> . R REG COMA REG COMA IMM
    (8) inst -> . I REG COMA REG COMA IMM
    (9) inst -> . I REG COMA IMM
    (10) inst -> . I REG COMA IMM REG
    (11) inst -> . I REG COMA REG COMA LABEL
    (12) inst -> . I REG COMA LABEL
    (13) inst -> . J IMM
    (14) inst -> . O

  ! shift/reduce conflict for LABELDEF resolved as shift
  ! shift/reduce conflict for R resolved as shift
  ! shift/reduce conflict for I resolved as shift
  ! shift/reduce conflict for J resolved as shift
  ! shift/reduce conflict for O resolved as shift
    $end            reduce using rule 1 (exp -> exp exp .)
    LABELDEF        shift and go to state 3
    R               shift and go to state 4
    I               shift and go to state 5
    J               shift and go to state 6
    O               shift and go to state 7

  ! LABELDEF        [ reduce using rule 1 (exp -> exp exp .) ]
  ! R               [ reduce using rule 1 (exp -> exp exp .) ]
  ! I               [ reduce using rule 1 (exp -> exp exp .) ]
  ! J               [ reduce using rule 1 (exp -> exp exp .) ]
  ! O               [ reduce using rule 1 (exp -> exp exp .) ]

    exp                            shift and go to state 8
    inst                           shift and go to state 2

state 9

    (3) exp -> LABELDEF inst .

    LABELDEF        reduce using rule 3 (exp -> LABELDEF inst .)
    R               reduce using rule 3 (exp -> LABELDEF inst .)
    I               reduce using rule 3 (exp -> LABELDEF inst .)
    J               reduce using rule 3 (exp -> LABELDEF inst .)
    O               reduce using rule 3 (exp -> LABELDEF inst .)
    $end            reduce using rule 3 (exp -> LABELDEF inst .)


state 10

    (4) inst -> R REG . COMA REG COMA REG
    (5) inst -> R REG . COMA REG
    (6) inst -> R REG .
    (7) inst -> R REG . COMA REG COMA IMM

    COMA            shift and go to state 13
    LABELDEF        reduce using rule 6 (inst -> R REG .)
    R               reduce using rule 6 (inst -> R REG .)
    I               reduce using rule 6 (inst -> R REG .)
    J               reduce using rule 6 (inst -> R REG .)
    O               reduce using rule 6 (inst -> R REG .)
    $end            reduce using rule 6 (inst -> R REG .)


state 11

    (8) inst -> I REG . COMA REG COMA IMM
    (9) inst -> I REG . COMA IMM
    (10) inst -> I REG . COMA IMM REG
    (11) inst -> I REG . COMA REG COMA LABEL
    (12) inst -> I REG . COMA LABEL

    COMA            shift and go to state 14


state 12

    (13) inst -> J IMM .

    LABELDEF        reduce using rule 13 (inst -> J IMM .)
    R               reduce using rule 13 (inst -> J IMM .)
    I               reduce using rule 13 (inst -> J IMM .)
    J               reduce using rule 13 (inst -> J IMM .)
    O               reduce using rule 13 (inst -> J IMM .)
    $end            reduce using rule 13 (inst -> J IMM .)


state 13

    (4) inst -> R REG COMA . REG COMA REG
    (5) inst -> R REG COMA . REG
    (7) inst -> R REG COMA . REG COMA IMM

    REG             shift and go to state 15


state 14

    (8) inst -> I REG COMA . REG COMA IMM
    (9) inst -> I REG COMA . IMM
    (10) inst -> I REG COMA . IMM REG
    (11) inst -> I REG COMA . REG COMA LABEL
    (12) inst -> I REG COMA . LABEL

    REG             shift and go to state 16
    IMM             shift and go to state 17
    LABEL           shift and go to state 18


state 15

    (4) inst -> R REG COMA REG . COMA REG
    (5) inst -> R REG COMA REG .
    (7) inst -> R REG COMA REG . COMA IMM

    COMA            shift and go to state 19
    LABELDEF        reduce using rule 5 (inst -> R REG COMA REG .)
    R               reduce using rule 5 (inst -> R REG COMA REG .)
    I               reduce using rule 5 (inst -> R REG COMA REG .)
    J               reduce using rule 5 (inst -> R REG COMA REG .)
    O               reduce using rule 5 (inst -> R REG COMA REG .)
    $end            reduce using rule 5 (inst -> R REG COMA REG .)


state 16

    (8) inst -> I REG COMA REG . COMA IMM
    (11) inst -> I REG COMA REG . COMA LABEL

    COMA            shift and go to state 20


state 17

    (9) inst -> I REG COMA IMM .
    (10) inst -> I REG COMA IMM . REG

    LABELDEF        reduce using rule 9 (inst -> I REG COMA IMM .)
    R               reduce using rule 9 (inst -> I REG COMA IMM .)
    I               reduce using rule 9 (inst -> I REG COMA IMM .)
    J               reduce using rule 9 (inst -> I REG COMA IMM .)
    O               reduce using rule 9 (inst -> I REG COMA IMM .)
    $end            reduce using rule 9 (inst -> I REG COMA IMM .)
    REG             shift and go to state 21


state 18

    (12) inst -> I REG COMA LABEL .

    LABELDEF        reduce using rule 12 (inst -> I REG COMA LABEL .)
    R               reduce using rule 12 (inst -> I REG COMA LABEL .)
    I               reduce using rule 12 (inst -> I REG COMA LABEL .)
    J               reduce using rule 12 (inst -> I REG COMA LABEL .)
    O               reduce using rule 12 (inst -> I REG COMA LABEL .)
    $end            reduce using rule 12 (inst -> I REG COMA LABEL .)


state 19

    (4) inst -> R REG COMA REG COMA . REG
    (7) inst -> R REG COMA REG COMA . IMM

    REG             shift and go to state 22
    IMM             shift and go to state 23


state 20

    (8) inst -> I REG COMA REG COMA . IMM
    (11) inst -> I REG COMA REG COMA . LABEL

    IMM             shift and go to state 24
    LABEL           shift and go to state 25


state 21

    (10) inst -> I REG COMA IMM REG .

    LABELDEF        reduce using rule 10 (inst -> I REG COMA IMM REG .)
    R               reduce using rule 10 (inst -> I REG COMA IMM REG .)
    I               reduce using rule 10 (inst -> I REG COMA IMM REG .)
    J               reduce using rule 10 (inst -> I REG COMA IMM REG .)
    O               reduce using rule 10 (inst -> I REG COMA IMM REG .)
    $end            reduce using rule 10 (inst -> I REG COMA IMM REG .)


state 22

    (4) inst -> R REG COMA REG COMA REG .

    LABELDEF        reduce using rule 4 (inst -> R REG COMA REG COMA REG .)
    R               reduce using rule 4 (inst -> R REG COMA REG COMA REG .)
    I               reduce using rule 4 (inst -> R REG COMA REG COMA REG .)
    J               reduce using rule 4 (inst -> R REG COMA REG COMA REG .)
    O               reduce using rule 4 (inst -> R REG COMA REG COMA REG .)
    $end            reduce using rule 4 (inst -> R REG COMA REG COMA REG .)


state 23

    (7) inst -> R REG COMA REG COMA IMM .

    LABELDEF        reduce using rule 7 (inst -> R REG COMA REG COMA IMM .)
    R               reduce using rule 7 (inst -> R REG COMA REG COMA IMM .)
    I               reduce using rule 7 (inst -> R REG COMA REG COMA IMM .)
    J               reduce using rule 7 (inst -> R REG COMA REG COMA IMM .)
    O               reduce using rule 7 (inst -> R REG COMA REG COMA IMM .)
    $end            reduce using rule 7 (inst -> R REG COMA REG COMA IMM .)


state 24

    (8) inst -> I REG COMA REG COMA IMM .

    LABELDEF        reduce using rule 8 (inst -> I REG COMA REG COMA IMM .)
    R               reduce using rule 8 (inst -> I REG COMA REG COMA IMM .)
    I               reduce using rule 8 (inst -> I REG COMA REG COMA IMM .)
    J               reduce using rule 8 (inst -> I REG COMA REG COMA IMM .)
    O               reduce using rule 8 (inst -> I REG COMA REG COMA IMM .)
    $end            reduce using rule 8 (inst -> I REG COMA REG COMA IMM .)


state 25

    (11) inst -> I REG COMA REG COMA LABEL .

    LABELDEF        reduce using rule 11 (inst -> I REG COMA REG COMA LABEL .)
    R               reduce using rule 11 (inst -> I REG COMA REG COMA LABEL .)
    I               reduce using rule 11 (inst -> I REG COMA REG COMA LABEL .)
    J               reduce using rule 11 (inst -> I REG COMA REG COMA LABEL .)
    O               reduce using rule 11 (inst -> I REG COMA REG COMA LABEL .)
    $end            reduce using rule 11 (inst -> I REG COMA REG COMA LABEL .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LABELDEF in state 8 resolved as shift
WARNING: shift/reduce conflict for R in state 8 resolved as shift
WARNING: shift/reduce conflict for I in state 8 resolved as shift
WARNING: shift/reduce conflict for J in state 8 resolved as shift
WARNING: shift/reduce conflict for O in state 8 resolved as shift
